diff --git a/node_modules/astro/dist/assets/utils/node/emitAsset.js b/node_modules/astro/dist/assets/utils/node/emitAsset.js
index 4a37e57..613f558 100644
--- a/node_modules/astro/dist/assets/utils/node/emitAsset.js
+++ b/node_modules/astro/dist/assets/utils/node/emitAsset.js
@@ -24,9 +24,9 @@ async function emitESMImage(id, _watchMode, fileEmitter) {
     writable: false,
     value: id
   });
-  if (fileMetadata.format === "svg") {
-    emittedImage.contents = fileData;
-  }
+  // if (fileMetadata.format === "svg") {
+  //   emittedImage.contents = fileData;
+  // }
   let isBuild = typeof fileEmitter === "function";
   if (isBuild) {
     const pathname = decodeURI(url.pathname);
diff --git a/node_modules/astro/dist/content/runtime.js b/node_modules/astro/dist/content/runtime.js
index 8d27bcf..d702fb6 100644
--- a/node_modules/astro/dist/content/runtime.js
+++ b/node_modules/astro/dist/content/runtime.js
@@ -69,10 +69,10 @@ function createGetCollection({
       const { default: imageAssetMap } = await import("astro:asset-imports");
       const result = [];
       for (const rawEntry of store.values(collection)) {
-        const data = updateImageReferencesInData(rawEntry.data, rawEntry.filePath, imageAssetMap);
+        // const data = updateImageReferencesInData(rawEntry.data, rawEntry.filePath, imageAssetMap);
         const entry = {
           ...rawEntry,
-          data,
+          // data,
           collection
         };
         if (hasFilter && !filter(entry)) {
@@ -240,7 +240,7 @@ function createGetEntry({
         return;
       }
       const { default: imageAssetMap } = await import("astro:asset-imports");
-      entry2.data = updateImageReferencesInData(entry2.data, entry2.filePath, imageAssetMap);
+      // entry2.data = updateImageReferencesInData(entry2.data, entry2.filePath, imageAssetMap);
       if (entry2.legacyId) {
         return { ...emulateLegacyEntry(entry2), collection };
       }
